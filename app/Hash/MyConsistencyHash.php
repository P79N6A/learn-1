<?phpnamespace App\Hash;class MyConsistencyHash implements ConsistencyHash{    public $servers = [];    public $virtualServers = [];    public $virtualPos = 200;    public function hash($str)    {        // TODO: Implement hash() method.        return sprintf("%u", crc32(md5($str)));    }    public function addServer($ip)    {        // TODO: Implement addServer() method.        if (!isset($this->servers[$ip])) {            for ($i = 0; $i < $this->virtualPos; $i++) {                $hash = $this->hash($ip . '#' . $i);                $this->virtualServers[$hash] = $ip;                $this->servers[$ip][] = $hash;            }            ksort($this->virtualServers);        }        /*$hash = $this->hash($ip);        $this->servers[$hash] = $ip;        ksort($this->servers);*/        return true;    }    public function removeServer($ip)    {        // TODO: Implement removeServer() method.        if (isset($this->servers[$ip])) {            foreach ($this->servers[$ip] as $hash) {                unset($this->virtualServers[$hash]);            }            unset($this->servers[$ip]);        }        //unset($this->servers[$ip]);        return true;    }    public function find($key)    {        // TODO: Implement find() method.        $hash = $this->hash($key);        $accessServer = current($this->virtualServers);        //dd($this->virtualServers);        //这就是线性查找法  一个一个的找        //二分查找法 效率更高 从中间找确定左右，在从左/右的中间再找        foreach ($this->virtualServers as $k => $v) {            if ($hash <= $k) {                return $v;                break;            }        }        //reset($this->virtualServers);        //dd($this->virtualServers);        /* echo $hash;         foreach ($this->servers as $k => $v) {             if ($hash <= $k) {                 return $v;                 break;             }         }*/        return $accessServer;    }}