<?php/** * Created by PhpStorm. * User: donggege * Date: 2019-05-18 * Time: 16:35 */namespace App\dataStructure;interface QueueInterface{    /**     * 向队列尾部添加一个（或多个）新的项。     * @return mixed     */    public function enqueue($value);    /**     * 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。     * @return mixed     */    public function dequeue();    /**     * 返回队列中第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动（不移除元素，只返回元素信息——与Stack类的peek方法非常类似）。     * @return mixed     */    public function front();    /**     * 如果队列中不包含任何元素，返回true，否则返回false。     * @return mixed     */    public function isEmpty();    /**     * size()：返回队列包含的元素个数，与数组的length属性类似。     *     * @return mixed     */    public function size();}class Queue implements QueueInterface{    protected $items = [];    /**     * 向队列尾部添加一个（或多个）新的项。     * @return mixed     */    public function enqueue($value)    {        return array_push($this->items, $value);    }    /**     * 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。     * @return mixed     */    public function dequeue()    {        return array_shift($this->items);    }    /**     * 返回队列中第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动（不移除元素，只返回元素信息——与Stack类的peek方法非常类似）。     * @return mixed     */    public function front()    {        return current($this->items);    }    /**     * 如果队列中不包含任何元素，返回true，否则返回false。     * @return mixed     */    public function isEmpty()    {        return empty($this->items);    }    /**     * size()：返回队列包含的元素个数，与数组的length属性类似。     *     * @return mixed     */    public function size()    {        return count($this->items);    }    /**     * @return array     */    public function getItems(): array    {        return $this->items;    }}